{
  "scheduledTime": "2020-05-10T07:00:00.000Z",
  "updates": [],
  "components": [
    "cda"
  ],
  "name": "Changes in graphql filtering",
  "content": "# Changes to item fields\n\n## Boolean field\n\nFiltering fields with `{eq: null}` will return an error message in response payload. Before this change, the filter would have returned always an empty array. You can still retrieve fields with `null` value using `{eq: false}`\n\n## Color field\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. You can use `{exists: false}` from now on.\n\n## DateTime field\n\nFiltering fields with, for instance `{neq: \"2020-04-09T00:00:00+02:00\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for `not null` values different from `2020-04-09T00:00:00+02:00`.\n\n## Date field\n\nFiltering fields with, for instance `{neq: \"2020-04-09\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for `not null` values different from `2020-04-09`.\n\n## Upload field\n\nFiltering fields with `{eq: null}` now has the same effect of using `{exists: false}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with `{neq: null}` now has the same effect of using `{exists: true}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with, for instance `{neq: \"123456\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` uploads ids different from `123456`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n**Important**: Filtering fields with `{in: []}` will return an empty collection. Before this change, the request would have returned all items.\n\n**Important**: Filtering fields with `{notIn: []}` will return all items. Before this change, the request would have returned an empty collection.\n\n**Important**: Filtering fields with, for instance `{notIn: [\"123456\"]}` will return all items having values different from `123456` **OR** equal to `null`. Before this change, the request would have returned only items having `not null`values different from `123456`.\n\n## Float fields\n\nFiltering fields with, for instance, `{neq: \"2.42\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `2.42`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Gallery\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Integer\n\nFiltering fields with, for instance, `{neq: \"5\"}` now will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `5`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## JSON\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Position (geo points)\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Link\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\nFiltering fields with `{eq: null}` now has the same effect of using `{exists: false}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with `{neq: null}` now has the same effect of using `{exists: true}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with, for instance, `{neq: \"123456\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `123456`.\n\n**Important**: Filtering fields with `{in: []}` will return an empty collection. Before this change, the request would have returned all items.\n\n**Important**: Filtering fields with `{notIn: []}` will return all items. Before this change, the request would have returned an empty collection.\n\nFiltering fields with, for instance `{notIn: [\"123456\"]}` will return all items having values different from `123456` **OR** equal to `null`. Before this change, the request would have returned only items having `not null`values different from `123456`.\n\n## Links\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Seo\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Slug\n\nFiltering fields with, for instance, `{neq: \"foobar\"}` now will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with, for instance `{notIn: [\"foobar\"]}` will return all items having values different from `foobar` **OR** equal to `null`. Before this change, the request would have returned only items having `not null`values different from `foobar`.\n\n## String\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\nFiltering fields with `{eq: null}` now has the same effect of using `{exists: false}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with `{neq: null}` now has the same effect of using `{exists: true}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with, for instance, `{neq: \"foobar\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with, for instance `{notIn: [\"foobar\"]}` will return all items having values different from `foobar` **OR** equal to `null`. Before this change, the request would have returned only items having `not null`values different from `foobar`.\n\n## Text\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\n## Video\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n# Changes to item metas\n\n## ID\n\nFiltering fields with `{eq: null}` will return an error message in response payload. Before this change, the filter would have returned an empty result.\n\nFiltering fields with `{neq: null}` will return an error message in response payload. Before this change, the filter would have returned an empty result.\n\n## Parent\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\nFiltering fields with `{eq: null}` now has the same effect of using `{exists: false}`. Before this change, the filter would have returned always an empty array.\n\n## Position\n\nFiltering fields with, for instance, `{neq: 3}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `3`.\n\n## Status\n\nFiltering fields with `{eq: null}` will return an error message in response payload. Before this change, the filter would have returned an empty result.\n\nFiltering fields with `{neq: null}` will return an error message in response payload. Before this change, the filter would have returned an empty result.\n\n# Changes to Upload fields\n\n## Alt, Title\n\nAdded `exist` filter.\n\nFiltering fields with `{eq: null}` now has the same effect of using `{exists: false}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with `{neq: null}` now has the same effect of using `{exists: true}`. Before this change, the filter would have returned always an empty array.\n\nFiltering fields with, for instance, `{neq: \"foobar\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with, for instance `{notIn: [\"foobar\"]}` will return all items having values different from `foobar` **OR** equal to `null`. Before this change, the request would have returned only items having `not null` values different from `foobar`.\n\n## Author\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Copyright\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n\n## Format\n\nFiltering fields with `{eq: null}`, `{neq: null}`, will now return an error message in response payload. Before this change, the request would have return an empy collection.\n\n## Height, Width\n\nFiltering fields with, for instance, `{neq: \"500\"}` will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `500`.\n\n## ID\n\nFiltering fields with `{eq: null}`, `{neq: null}`, will now return an error message in response payload. Before this change, the request would have return an empy collection.\n\n## InUse\n\nFiltering fields with `{eq: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{eq: false}`. You can use `{eq: false}` from now on.\n\n## MimeType\n\nFiltering fields with `{eq: null}`, `{neq: null}`, will now return an error message in response payload. Before this change, the request would have return an empy collection.\n\n## Notes\n\nFiltering fields with, for instance, `{notMatches: { pattern: \"foobar\"}}`  will return *also* items with `null` values. Before this change, the filter would have returned only for items with  `not null` values different from `foobar`.\n\nFiltering fields with `{exists: null}` will return an error message in response payload. Before this change, the filter would have returned the same result as `{exists: false}`. Please, use `{exists: false}` instead.\n\n## Size\n\nFiltering fields with `{eq: null}`, `{neq: null}`, will now return an error message in response payload. Before this change, the request would have return an empy collection.\n\n## SmartTags, Tags\n\nFiltering fields with `{contains: null}`, will now return an error message in response payload. Before this change, the request would have return an empy collection.",
  "minutes": "0"
}